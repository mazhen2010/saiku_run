<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <context:property-placeholder
            location="/WEB-INF/saiku-beans.properties"
            ignore-resource-not-found="true"
            ignore-unresolvable="true"
            order ="0" />

    <context:property-placeholder
            location="/WEB-INF/saiku-beans.properties"
            ignore-resource-not-found="true"
            ignore-unresolvable="true"
            order ="-1" />

    <bean id="sessionRegistry"
          class="org.springframework.security.core.session.SessionRegistryImpl" />

    <!--	<bean id="classpathDsManager"
            class="org.saiku.service.datasource.ClassPathResourceDatasourceManager">
            <property name="path" value="res:saiku-datasources" />
        </bean>-->
    <bean id="repositoryDsManager" class="org.saiku.service.datasource.RepositoryDatasourceManager" init-method="load" destroy-method="unload">
        <!--aop:scoped-proxy/-->

        <property name="userService" ref="userServiceBean"/>
        <property name="configurationpath" value="${repoconfig}"/>
        <property name="datadir" value="${repodata}"/>
        <property name="foodmartdir" value="${foodmartrepo}"/>
        <property name="foodmartschema" value="${foodmartschema}"/>
        <property name="foodmarturl" value="${foodmarturl}"/>
        <property name="earthquakeDir" value="${earthquakerepo}"/>
        <property name="earthquakeSchema" value="${earthquakeschema}"/>
        <property name="earthquakeUrl" value="${earthquakeurl}"/>
        <property name="repoPasswordProvider" ref ="repoPasswordProviderBean"/>
        <property name="defaultRole" value="${default.role}"/>
        <property name="externalPropertiesFile" value="${external.properties.file}"/>
        <!-- If you change the repoPassword set this property for at least 1 restart to update the old repo password-->
        <!--<property name="oldRepoPassword" value="sa!kuanalyt!cs"/>-->
        <property name="type" value="${repo.type}"/>
        <property name="sessionRegistry" ref="sessionRepo"/>
        <property name="workspaces" value="${workspaces}"/>
    </bean>

    <bean id="repoPasswordProviderBean" class="org.saiku.service.util.security.authentication.SimplePasswordProvider">
        <constructor-arg index="0" value="${webdav.password}"/>
    </bean>


    <bean id="licenseUtilsBean" class="org.saiku.service.license.LicenseUtils" init-method="init">
        <property name="repositoryDatasourceManager" ref="repositoryDsManager" />
    </bean>


    <bean id="h2database" class="org.saiku.database.Database" init-method="init">
        <property name="datasourceManager" ref="repositoryDsManager"/>

    </bean>

    <bean id="authorisationPredicate" class="org.saiku.service.util.security.authorisation.MustBeAuthenticatedAuthorisation"/>

    <bean id="sessionRepo" class="org.saiku.repository.ScopedRepo" scope="session">
        <aop:scoped-proxy/>
    </bean>

    <bean id="sessionService" class="org.saiku.web.service.SessionService">
        <property name="sessionRepo" ref="sessionRepo"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authorisationPredicate" ref="authorisationPredicate"/>
        <property name="l" ref="licenseUtilsBean"/>
        <property name="orbisAuthEnabled" value="${orbis.auth.enabled}"/>
    </bean>

    <bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter"/>
    <bean class="org.saiku.datasources.connection.MondrianVFS" init-method="init" id="mondrianVFS">
        <property name="datasourceManager" ref="repositoryDsManager"/>
    </bean>
    <bean id="connectionManager" class="org.saiku.web.core.SecurityAwareConnectionManager" init-method="init"
          destroy-method="destroy" depends-on="mondrianVFS">
        <property name="dataSourceManager" ref="repositoryDsManager"/>
        <property name="sessionService" ref="sessionService"/>

    </bean>

    <bean id="datasourceServiceBean" class="org.saiku.service.datasource.DatasourceService">
        <property name="connectionManager" ref="connectionManager"/>
    </bean>

    <bean id="userDaoDataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${userdao.driverclass}" />
        <property name="url"
                  value="${userdao.url}"/>
        <property name="username" value="${userdao.username}" />
        <property name="password" value="${userdao.password}" />
    </bean>

    <bean id="userDAO" class="org.saiku.database.JdbcUserDAO">
        <property name="dataSource" ref="userDaoDataSource" />
    </bean>

    <bean id="userServiceBean" class="org.saiku.service.user.UserService">
        <property name="jdbcUserDAO" ref="userDAO"/>
        <property name="datasourceService" ref="datasourceServiceBean"/>
        <property name="iDatasourceManager" ref="repositoryDsManager"/>
        <property name="adminRoles">
            <list>
                <value>ROLE_ADMIN</value>
            </list>
        </property>
        <property name="sessionService" ref="sessionService"/>
    </bean>
    <bean id="logwriterbean" class="org.saiku.log.LogExtractor">
        <property name="logdirectory" value="${logdir}"/>
    </bean>
    <bean id="adminBean" class="org.saiku.web.rest.resources.AdminResource">
        <property name="userService" ref="userServiceBean"/>
        <property name="datasourceService" ref="datasourceServiceBean"/>
        <property name="olapDiscoverService" ref="olapDiscoverServiceBean"/>
        <property name="repositoryDatasourceManager" ref="repositoryDsManager"/>
        <property name="logExtractor" ref="logwriterbean"/>
    </bean>

    <bean id="olapDiscoverServiceBean" class="org.saiku.service.olap.OlapDiscoverService">
        <property name="datasourceService" ref="datasourceServiceBean"/>
    </bean>

    <bean id="olapQueryBean" scope="session" class="org.saiku.service.olap.OlapQueryService" destroy-method="destroy">
        <property name="olapDiscoverService" ref="olapDiscoverServiceBean"/>
    </bean>


    <!--<bean id="datasourceResourceBean" class="org.saiku.web.rest.resources.DataSourceResource">
        <property name="datasourceService" ref="datasourceServiceBean"/>
    </bean>-->

    <bean id="olapDiscoverBean" scope="session"
          class="org.saiku.web.rest.resources.OlapDiscoverResource">
        <property name="olapDiscoverService" ref="olapDiscoverServiceBean"/>
    </bean>


    <bean id="queryResource" scope="request"
          class="org.saiku.web.rest.resources.QueryResource">
        <property name="olapQueryService" ref="olapQueryBean"/>
        <property name="olapDiscoverService" ref="olapDiscoverServiceBean"/>
        <property name="repository" ref="repository2bean"/>
    </bean>

    <bean id="thinQueryBean" scope="session"
          class="org.saiku.service.olap.ThinQueryService">
        <property name="olapDiscoverService" ref="olapDiscoverServiceBean"/>
    </bean>

    <bean id="platformBean" class="org.saiku.service.PlatformUtilsService">
        <property name="path" value="${pluginpath}"/>
    </bean>

    <bean id="infoResource" class="org.saiku.web.rest.resources.InfoResource">
        <property name="platformUtilsService" ref="platformBean"/>
    </bean>

    <bean id="queryResource2" scope="request"
          class="org.saiku.web.rest.resources.Query2Resource">
        <property name="thinQueryService" ref="thinQueryBean"/>
        <property name="repository" ref="repository2bean"/>
    </bean>

    <bean id="sessionResource" class="org.saiku.web.rest.resources.SessionResource">
        <property name="sessionService" ref="sessionService"/>
        <property name="userService" ref="userServiceBean"/>

    </bean>

    <bean id="repository2bean" scope="request"
          class="org.saiku.web.rest.resources.BasicRepositoryResource2">
        <property name="sessionService" ref="sessionService"/>
        <property name="datasourceService" ref="datasourceServiceBean"/>
    </bean>


    <bean id="filterRepositoryBean" scope="session"
          class="org.saiku.web.rest.resources.FilterRepositoryResource">
        <property name="olapQueryService" ref="olapQueryBean"/>
        <property name="sessionService" ref="sessionService"/>
    </bean>


    <bean id="exporterBean" scope="request"
          class="org.saiku.web.rest.resources.ExporterResource">
        <property name="repository" ref="repository2bean"/>
        <property name="query2Resource" ref="queryResource2"/>
    </bean>


    <bean id="licenseUtils" class="org.saiku.service.license.LicenseUtils">
        <property name="repositoryDatasourceManager" ref="repositoryDsManager"/>
    </bean>
    <bean id="licenseBean" class="org.saiku.web.rest.resources.License">
        <property name="databaseManager" ref="h2database"/>
        <property name="licenseUtils" ref="licenseUtils"/>
        <property name="userService" ref="userServiceBean"/>
    </bean>

    <bean id="statsBean" class="org.saiku.web.rest.resources.StatisticsResource"/>

    <bean id="startupBean" class="org.saiku.web.rest.util.StartupResource" init-method="init"/>


</beans>
